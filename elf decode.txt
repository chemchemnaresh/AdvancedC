#include<stdio.h>
int a,b,c=3;             /*globel varibles */
static int x,y=10,z=20;  /* globel static varible */
const char str[] ="hello";
int main()
{
        /* local varibles */
        static int i,j,k,l=5,m=7;    /* local satic varibles */
        printf("hello world\n");
       return 0;
}

       /* ELF Header */

00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
00000010  03 00 3e 00 01 00 00 00  60 10 00 00 00 00 00 00  |..>.....`.......|
00000020  40 00 00 00 00 00 00 00  d0 3a 00 00 00 00 00 00  |@........:......|
00000030  00 00 00 00 40 00 38 00  0d 00 40 00 1f 00 1e 00  |....@.8...@.....|


 e_ident[EI_MAG0..EI_MAG3]	0x7f + ELF		Magic Number
  e_ident[EI_CLASS}		0x02			64-bit Architecture
  e_ident[EI_DATA]		0x01			Little Endian
  e_ident[EI_VERSION]		0x01			ELF Version V1
  e_ident[EI_OSABI]		0x00			System Version V
  e_ident[EI_ABIVERSION]	0x00			Unused
  e_ident[EI_PAD] 		0x00000000000000	7 bytes unused
  e_type			0x0003			ET_Shared
  e_machine			0x003e			X86_64
  e_version			0x00000001		Version 1
  e_entry			0x0000000000001060	Entry point address to which the system first transfers control.
  e_phoff			0x0000000000000040	Program header table offset
  e_shoff			0x0000000000003ad0	section header table offset
  e_flags			0x00000000		Architecture dependent interpretation
  e_ehsize			0x0040			Size of this ELF header file
  e_phentsize			0x0038			Size of each header entry.
  e_phnum			0x000d			Number of program header table entries.
  e_shentsize			0x0040			Size of each entry in section header table.
  e_shnum			0x001f			Number of section header table entries.
  e_shstrndx			0x001e			Holds the section header table index of the entry associated with the section name string table.

   /* Program header table entry */
In ELF Header, the e_phoff member represents the program header table offset in this program
e_phoff = 0x00000000000040. This ELF file contains total 13 program header entries.
```

00000040  06 00 00 00 04 00 00 00  40 00 00 00 00 00 00 00  |........@.......|
00000050  40 00 00 00 00 00 00 00  40 00 00 00 00 00 00 00  |@.......@.......|
00000060  d8 02 00 00 00 00 00 00  d8 02 00 00 00 00 00 00  |................|
00000070  08 00 00 00 00 00 00 00

 p_type              0x00000006           		PHDR type
      p_flags             0x00000004           		Read_ONLY access
      p_offset            0x0000000000000040		Offset from the beginning of the file at which the first byte of the segment resides.
      p_vaddr		  0x0000000000000040		Virtual address at which the first byte of the segment resides in memory.
      p_paddr		  0x0000000000000040            Physical address of the segment.
      p_filesz            0x00000000000002d8		This member holds the number of bytes in the file image of the  segment.
      p_memsz		  0x00000000000002d8		This  member  holds  the  number of bytes in the memory image of the segment.
      p_align             0x0000000000000008		Alignment in memory.

 /* Section Header table: Entry */
   In ELF header, the e_shoff member represents the section header table offset in this program
   e_shof = 0x0000000000003ad0. This ELF file contains total 31 sections.

00003ad0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00003ae0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00003af0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00003b00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
    
    sh_name		0x00000000		Offset in the section header table
               sh_type		0x00000000		type = NULL
               sh_flags		0x0000000000000000	No flags to this section
               sh_addr		0x0000000000000000	Address of the section
               sh_offset     	0x0000000000000000	Offset in the file where the section resides
               sh_size		0x0000000000000000	Size of the section
               sh_link		0x00000000	  	No links to other sections
               sh_info		0x00000000		More information about the section
               sh_addralign	0x0000000000000000	Alignment 
               sh_entsize	0x0000000000000000	Some sections hold a table of fixed-sized entries, such as
              							a symbol table.  For such a section, this member gives the
              							size in bytes for each entry.  This member contains zero
              							if the section does not hold a table of fixed-size
              							entries.

       /* .rodata section */

    00002000  01 00 02 00 68 65 6c 6c  6f 00 68 65 6c 6c 6f 20  |....hello.hello |
    00002010  77 6f 72 6c 64 00 00 00                           |world......;D...|  